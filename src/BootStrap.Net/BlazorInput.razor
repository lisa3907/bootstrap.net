@using BootStrap.Net
@using BootStrap.Net.Util
@using Microsoft.AspNetCore.Components

@inherits BootStrapComponentBase

<DynamicElement Attributes="@UnknownParameters" TagName="@Tag" class="@classname" type="@Type" readonly="@IsReadonly" disabled="@IsDisabled" multiple="@IsMultipleSelect" size="@SelectSize" selectedIndex="@SelectedIndex" value="@Value">
    @ChildContent
</DynamicElement>

@functions {
    string classname
    {
        get
        {
            var size = Size != Size.None ? $"form-control-{Size.ToDescriptionString()}" : null;
            var isvalid = IsValid ? "is-valid" : null;
            var isinvalid = IsInvalid ? "is-invalid" : null;
            var cls = GetClass();
            return $"{isvalid} {isinvalid} {cls} {size} {Class}";
        }
    }

    string Tag
    {
        get
        {
            switch(InputType)
            {
                case InputType.Select:
                    return "select";
                case InputType.TextArea:
                    return "textarea";
                default:
                    return "input";
            }
        }
    }

    [Parameter] public InputType InputType { get; set; } = InputType.Text;
    [Parameter] public Size Size { get; set; } = Size.None;
    [Parameter] public bool IsReadonly { get; set; }
    [Parameter] public bool IsPlaintext { get; set; }
    [Parameter] public bool IsDisabled { get; set; }
    [Parameter] public bool IsChecked { get; set; }
    [Parameter] public bool IsValid { get; set; }
    [Parameter] public bool IsInvalid { get; set; }
    [Parameter] public bool IsMultipleSelect { get; set; }
    [Parameter] public int SelectSize { get; set; }
    [Parameter] public int SelectedIndex { get; set; }
    [Parameter] public string Value { get; set; }
    [Parameter] public Action<string> ValueChanged { get; set; }
    [Parameter] public string Class { get; set; }
    [Parameter] public RenderFragment ChildContent { get; set; }

    private string Type
    {
        get
        {
            return InputType.ToDescriptionString();
        }
    }

    private string GetClass()
    {
        switch (this.InputType)
        {
            case InputType.Checkbox:
                return "form-check-input";
            case InputType.Radio:
                return "form-check-input";
            case InputType.File:
                return "form-control-file";
            case InputType.Range:
                return "form-control-range";
            default:
                return IsPlaintext ? "form-control-plaintext" : "form-control";
        }
    }

    void onchange(ChangeEventArgs e)
    {
        Console.WriteLine("e: {0}", e.Value);
        Value = e.Value.ToString();
        ValueChanged?.Invoke(Value);
    }
}