@inherits BootStrapComponentBase
@using BootStrap.Net.Util

<DynamicElement Attributes="@UnknownParameters" TagName="@Tag" class="@classname">
    @ChildContent
</DynamicElement>

@functions {
        string classname
    {
            get
        {
                return $"{GetClass()} {Class}";
            }
        }
    private string Tag
    {
        get
        {
            switch (CardType)
            {
                case CardType.Image:
                    return "img";
                case CardType.Title:
                    return "h5";
                case CardType.Subtitle:
                    return "h6";
                case CardType.Text:
                    return "p";
                case CardType.Link:
                    return "a";
                case CardType.Header:
                    return HeadingSize.ToDescriptionString();
                default:
                    return "div";

            }

        }

    }

    [Parameter] public CardType CardType { get; set; } = CardType.Card;
    [Parameter] public VerticalAlignment VerticalAlignment { get; set; } = VerticalAlignment.None;
    [Parameter] public Alignment Alignment { get; set; } = Alignment.Left;
    [Parameter] public HeadingSize HeadingSize { get; set; } = HeadingSize.None;
    [Parameter] public bool IsInverse { get; set; }
    [Parameter] public Color Color { get; set; } = Color.None;
    [Parameter] public bool IsOutline { get; set; }
    [Parameter] public string Class { get; set; }
    [Parameter] public RenderFragment ChildContent { get; set; }

    private string GetImageVerticalAlignmnet()
    {
        switch (this.VerticalAlignment)
        {
            case VerticalAlignment.Top:
                return "-top";
            case VerticalAlignment.Bottom:
                return "-bottom";
            default:
                return null;
        }
    }

    private string GetCardAlignmnet()
    {
        switch (this.Alignment)
        {
            case Alignment.Center:
                return "text-center";
            case Alignment.Right:
                return "text-right";
            default:
                return null;
        }
    }

    private string GetCardColor()
    {
        if (Color == Color.None) { return null; }
        var textColor = Color == Color.Light || IsOutline ? null : "text-white";
        var prefix = IsOutline ? "border" : "bg";
        return $"{textColor} {prefix}-{Color.ToDescriptionString()}";
    }

    private string GetTextColor()
    {
        if (IsOutline) { return null; }
        if (Color == Color.None || Color == Color.Light) { return null; }
        return $"text-{Color.ToDescriptionString()}";
    }

    private string GetClass()
    {
        switch (this.CardType)
        {
            case CardType.Body:
                return $"card-body {GetTextColor()}";
            case CardType.Card:
                var inverse = IsInverse ? "bg-dark text-white" : null;
                return $"card {GetCardColor()} {GetCardAlignmnet()} {inverse}";
            case CardType.Image:
                return $"card-img{GetImageVerticalAlignmnet()}";
            case CardType.Title:
                return "card-title";
            case CardType.Subtitle:
                return "card-subtitle mb-2 text-muted";
            case CardType.Link:
                return "card-link";
            case CardType.Header:
                return "card-header";
            case CardType.Footer:
                return "card-footer";
            case CardType.ImageOverlay:
                return "card-img-overlay";
            case CardType.Group:
                return "card-group";
            case CardType.Deck:
                return "card-deck";
            case CardType.Columns:
                return "card-columns";
            default:
                return null;
        }
    }
}