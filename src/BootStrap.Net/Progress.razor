@inherits BootStrapComponentBase
@using BootStrap.Net.Util

@if (!IsMulti && !IsBar)
{
<DynamicElement style="@Style" Attributes="@UnknownParameters" TagName="div" class="progress">
    <div class="@classname" style="@styles" role="progressbar" aria-valuenow="@Value" aria-valuemin="0" aria-valuemax="@Max">@ChildContent</div>
</DynamicElement>
}
@if (IsMulti && !IsBar)
{
<DynamicElement Attributes="@UnknownParameters" TagName="div" class="@classname" style="@Style">
    @ChildContent
</DynamicElement>
}
@if (!IsMulti && IsBar)
{
<DynamicElement style="@styles" Attributes="@UnknownParameters" TagName="div" class="@classname" role="progressbar" aria-valuenow="@Value" aria-valuemin="0" aria-valuemax="@Max">
    @ChildContent
</DynamicElement>
}

@functions {
    [Parameter] public int Value { get; set; }
    [Parameter] public int Max { get; set; } = 100;
    string styles
    {
        get
        {
            if (Value == 0) { return null; }
            var percent = Math.Round(((double)Value / (double)Max) * 100);
            return $"width: {percent}%; {Style}";
        }
    }
    private string classname
    {
        get
        {
            if (IsMulti && !IsBar) { return $"progress {Class}"; }
            var color = Color != Color.None ? $"bg-{Color.ToDescriptionString()}" : null;
            var striped = IsStriped ? "progress-bar-striped" : null;
            var animated = IsAnimated ? "progress-bar-animated" : null;
            return $"progress-bar {striped} {animated} {color} {Class}";
        }
    }
    [Parameter] public Color Color { get; set; } = Color.None;
    [Parameter] public bool IsMulti { get; set; }
    [Parameter] public bool IsBar { get; set; }
    [Parameter] public bool IsStriped { get; set; }
    [Parameter] public bool IsAnimated { get; set; }
    [Parameter] public string Class { get; set; }
    [Parameter] public string Style { get; set; }
    [Parameter] public RenderFragment ChildContent { get; set; }
}